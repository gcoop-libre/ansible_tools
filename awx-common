#!/bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2020 Osiris Alejandro Gomez <osiris@gcoop.coop>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# shellcheck disable=SC2016
# shellcheck disable=SC2028
# shellcheck disable=SC2034
# shellcheck disable=SC2046
# shellcheck disable=SC2086
# shellcheck disable=SC2181

RED="$(tput setaf 196)"
GREEN="$(tput setaf 46)"
DIR_REAL="$(realpath "$DIR_BIN")"
DIR_BASE="$(dirname "$DIR_REAL")"
AWX_CONFIG="$HOME/.awx-config"
BIN=$(basename "$0")

die ()
{
  printf "%s\\n" "${RED}[ERROR] $1 $NORMAL" && exit 1
}

log ()
{
  local NOW
  NOW="$(date +'%F %T')"
  printf "%s\\n" "${NORMAL}${NOW} [INFO] $1 $NORMAL"
}

log_send_file()
{
  MAX_COLS="$(tput cols)"
  echo "SEND $1 to $AWX_CFG_HOST *****"
}

success ()
{
  printf "%s\\n" "${GREEN}[OK] $1 $NORMAL" && exit 0
}

stderror ()
{
  echo >&2 "$1"
}

[[ ! -e "$AWX_CONFIG" ]] && die "NOT FOUND FILE: $AWX_CONFIG"

eval $(sed '/:/!d;/^ *#/d;s/:/ /;' < "$AWX_CONFIG" | while read -r k v
do
    str="$k='$v'"
    echo "$str"
done)

[[ -z "$HTTP_PROXY" ]] || stderror "Using HTTP_PROXY=$HTTP_PROXY"

# check dependencies

for i in awx-cli jq yq
do
  command -v "$i" >/dev/null || die "try: pip install $i " \
    | sed 's/awx-cli/ansibel-tower-cli/g'
done

markdown()
{
cat << EOF
---
fontsize: 8pt
code-block-font-size: 8pt
classoption: landscape
---
EOF
}

code()
{
  printf "\\n\\n%s\\n\\n" '```'
}

title1()
{
  printf "\\n# %s\\n\\n" "$1"
}

title2()
{
  printf "\\n## %s\\n\\n" "$1"
}

title3()
{
  printf "\\n### %s\\n\\n" "$1"
}

get_file_list()
{
  local DIR
  DIR='.'

  [[ -z "$1" ]] && exit 1
  [[ ! -z "$2" ]] && DIR="$2"

  find -L "$DIR" -type f -iname "$1" | while read -r FILE
  do
    echo "$FILE"
  done

}

filelist_projects()
{

  get_file_list "$PROJECT_PREFIX*.json" "$DIR_PROJECT"

}

filelist_inventory()
{
  [[ -d "$DIR_INVENTORY" ]] || die "NOT FOUND $PWD/$DIR_INVENTORY"

  get_file_list '*.json' "$DIR_INVENTORY"

}

filelist_job_templates()
{

  get_file_list "$JOB_TEMPLATE_PREFIX*.json" "$DIR_JOB_TEMPLATE"

}

filelist_workflows()
{

  get_file_list "$WORKFLOW_PREFIX*.json" "$DIR_WORKFLOW"

}

filelist_send_all()
{
  local FILE

  [[   -z "$1" ]] && exit 1
  [[ ! -e "$1" ]] && exit 1

  while read -r FILE
  do
    log_send_file "$FILE"
    echo awx-cli send $AWX_DEBUG "$FILE" | bash
  done < "$1"

}

grant_inventory_admin()
{
  awx-cli role grant \
    -v               \
    --type admin     \
    --team "$2"      \
    --inventory "$1"
}

grant_inventory_use()
{
  awx-cli role grant \
    -v               \
    --type use       \
    --team "$2"      \
    --inventory "$1"
}

grant_project()
{
  local TYPE

  TYPE='use'

  [[ ! -z "$3" ]] && TYPE="$3"

  echo awx-cli role grant \
    "$AWX_DEBUG"          \
    --type "$TYPE"        \
    --team "$2"           \
    --project "$1"        | bash
}

grant_project_use()
{
  grant_project "$1" "$2" 'use'
}

grant_project_admin()
{
  grant_project "$1" "$2" 'admin'
}

grant_job_template()
{
  local TYPE

  TYPE='execute'

  [[ ! -z "$3" ]] && TYPE="$3"

  echo awx-cli role grant \
    "$AWX_DEBUG"          \
    --type "$TYPE"        \
    --team "$2"           \
    --job-template "$1"   | bash
}

grant_job_template_admin()
{
  grant_job_template "$1" "$2" 'admin'
}

grant_job_template_execute()
{
  grant_job_template "$1" "$2" 'execute'
}

grant_workflow()
{
  local TYPE

  TYPE='execute'

  [[ ! -z "$3" ]] && TYPE="$3"

  echo awx-cli role grant \
    $AWX_DEBUG            \
    --type "$TYPE"        \
    --team "$2"           \
    --workflow "$1"       | bash
}

grant_workflow_execute()
{
  grant_workflow "$1" "$2" 'execute'
}

group_get_id()
{
  awx-cli group get  \
    --inventory "$1" \
    --name "$2"      \
    --format id
}

host_get_id()
{
  awx-cli host get   \
    --inventory "$1" \
    --name "$2"      \
    --format id
}

host_associate()
{
  awx-cli host associate \
    --host "$1"          \
    --group "$2"
}

host_list_enabled()
{

awx-cli host list  \
  --inventory "$1" \
  --enabled true   \
  --all-pages      \
  --format id      \
  | tr ' ' '\n'    \
  | grep -vE '^$'

}

inventory_get_id()
{
  awx-cli inventory get \
    --format id         \
    --name "$1"
}

host_disable()
{
  awx-cli host modify   \
    --enabled false     \
    --inventory "$1"    \
    --format human "$2"
}


log_ansible_proxmox_kvm()
{

  [[ ! -e "$1" ]] && die "NOT FOUND FILE $1"

  local DATE HOST VMID STATE

  grep 'ansible-proxmox_kvm:' "$1" | while read -r LINE
  do
    DATE="$(echo "$LINE" | cut -c -15)"
    HOST="$(echo "$LINE" | awk '{print $4}')"
    VMID="$(echo "$LINE" | grep -oE 'vmid=[0-9]+')"
    STATE="$(echo "$LINE" | grep -oE 'state=[a-z]+')"
    printf "%s %s ansible-proxmox_kvm: %s %s\\n" "$DATE" "$HOST" "$VMID" "$STATE"
  done

}

project_update()
{
  awx-cli project update -n "$1" $AWX_DEBUG
}

awx_ad_hoc_shell_header()
{
  local INVENTORY LIMIT COMMAND TITLE MSG
  INVENTORY="$1"
  LIMIT="$2"
  COMMAND="$3"
  TITLE="$4"

MSG=$(cat << EOF
## Execute %s in %s" "$TITLE" "$LIMIT"

\`\`\`

  # awx-ad-hoc-shell "$INVENTORY" "$LIMIT" "$COMMAND""

EOF
)

echo "$MSG"

}

awx_ad_hoc_shell_launch()
{
  "$INVENTORY" "$LIMIT" "$COMMAND"
  awx-ad-hoc-shell "$INVENTORY" "$LIMIT" "$COMMAND"
}

awx_ad_hoc_shell_footer()
{
  echo "\\n\`\`\`"
}

awx_ad_hoc_shell()
{
  local INVENTORY LIMIT COMMAND TITLE

awx_ad_hoc_shell_header "$INVENTORY" "$LIMIT" "$COMMAND" "$TITLE"
awx_ad_hoc_shell_launch "$INVENTORY" "$LIMIT" "$COMMAND"
awx_ad_hoc_shell_footer

}

awx_cfg_get_host()
{

grep host "$HOME/.tower_cli.cfg" | cut -d= -f2 | tr -d ' '

}

wait_seconds()
{
  local S
  S=5

  [[ ! -z "$2" ]] && S="$2"

  for i in $(seq "$S" -1 0)
  do
    echo "wait $i seconds to find and send all $1... "
    sleep 1
  done
}

filelist_total()
{
  local TOTAL

  TOTAL="$(wc -l "$1" | cut -d' ' -f1)"
  printf "found %s %s\\n" "$TOTAL" "$2"
}

function json_is_inventory()
{
  local JSON
  local ASSET_TYPE

  JSON="$1"
  ASSET_TYPE="$(jq -r '.[] | .asset_type' "$JSON")"

  [[ "$ASSET_TYPE" = "$2" ]] && return 1
  return 0

}

function get_json()
{
  local JSON
  local NAME
  local NOW
  local BAK

  mkdir -p "$1"
  NAME="$(echo "$2" | tr '/' '-')"
  JSON="$1/$NAME.json"
  NOW="$(date +%s)"
  BAK="$1/$NAME.json.$NOW.bak"

  if [[ -e "$JSON" ]]
  then
    stderror "ALREADY EXISTS $JSON"
    stderror "BACKUP $JSON TO $BAK"
    mv "$JSON" "$BAK"
  fi

  >&2 echo "RECEIVE $JSON"
  awx-cli receive --$1 "$2" > "$JSON"
}

json_get_unified_job_name()
{
  local JQ

  JQ='.[] | .asset_relation | .workflow_nodes | .[] | .unified_job_name'
  jq -r "$JQ" "$1"
}

function json_get_project()
{
  local JQ

  JQ='.[] | .project'
  jq -r "$JQ" "$1"
}

function get_json_workflows()
{
  local TMP
  local N

  N="$(basename "$1" .json)"
  json_get_unified_job_name "$1" | grep "$WORKFLOW_PREFIX" \
    | while read -r i
      do
        json_get_unified_job_name "$DIR_WORKFLOW/$i.json" \
          | grep "$WORKFLOW_PREFIX"  \
          | while read -r j
            do
              json_get_unified_job_name "$DIR_WORKFLOW/$j.json"
              echo "$DIR_WORKFLOW/$j.json"
            done
        echo "$DIR_WORKFLOW/$i.json"
      done
  echo "$DIR_WORKFLOW/$N.json"
}

function get_url()
{
  local P

  [[ "$1" = 'project'      ]] && P='#/projects/'
  [[ "$1" = 'job_template' ]] && P='#/templates/job_template'
  [[ "$1" = 'workflow'     ]] && P='#/templates/workflow_job_template'

  printf "%s/%s/%s" "$AWX_CFG_HOST" "$P" "$2"
}

project_get_id()
{
  [[ -z "$1" ]] || awx-cli project get -n "$1" -f id
}

job_template_get_id()
{
  [[ -z "$1" ]] || awx-cli job_template get -n "$1" -f id
}

jq_yq_modify()
{
  jq empty "$1" 2>/dev/null

  if [[ "$?" -eq 0 ]]
  then
    jq -r ".$2=\"$3\"" "$1" | sponge "$1"
  else
    yq -r ".$2=\"$3\"" "$1" | sponge "$1"
  fi
}

AWX_CFG_HOST="$(awx_cfg_get_host)"
