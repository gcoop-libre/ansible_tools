#!/bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2020 Osiris Alejandro Gomez <osiris@gcoop.coop>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# shellcheck disable=SC1090
# shellcheck disable=SC1091
# shellcheck source=/dev/null

DIR_BIN=$(dirname "$0") && source "$DIR_BIN/awx-common"

function usage()
{
cat << EOF
Usage:

\`\`\`bash

  $BIN HOST [KEY|all] [INVENTORY|prefix-]

\`\`\`

Get _host_ variables from _inventory_

Example:

  Implicit _inventory_ from _host_:

\`\`\`bash

  $BIN pve-dev01

\`\`\`

  Get value of \`ansible_host\` from _host_:

\`\`\`bash

  $BIN pve-dev01 ansible_host

\`\`\`

  Explicit _host_, all variables and _inventory_:

\`\`\`bash

  $BIN dev01 all pve

\`\`\`

EOF
exit 0
}

[[ "$1" =~ ^[-]+(h|help) ]] && usage

[[ -z "$1" ]] && die "EMPTY HOST"

[[ -n "$HOST"      ]] || HOST="$1"
[[ -z "$HOST"      ]] && die "EMPTY HOST"
[[ -n "$KEY"       ]] || KEY='all'
[[ -z "$2"         ]] || KEY="$2"
[[ -n "$INVENTORY" ]] || INVENTORY="$3"
PREFIX="${HOST//-*/}"
[[ -z "$INVENTORY" ]] && INVENTORY="${PREFIX,,}"

JSON="$(mktemp --suffix .json)"

awx-cli host get            \
  --format json             \
  --inventory "$INVENTORY"  \
  --name "$HOST"            > "$JSON" 2>/dev/null

YAML="$(mktemp --suffix .yml)"
MSG="EMPTY JSON WHEN GET $KEY FROM HOST $HOST IN INVENTORY $INVENTORY"

[[ -s "$JSON" ]] || die "$MSG"

jq -r .variables "$JSON" > "$YAML" 2>/dev/null

if [[ "$KEY" = 'all' ]]
then

  printf "%s\\n\\n" '---'
  yq -y --sort-keys -r . "$YAML"

else
  VALUE="$(yq -yr ".$KEY" "$YAML" | grep -vi null)"
  echo "$VALUE"
fi

rm -f "$JSON"
rm -f "$YAML"
