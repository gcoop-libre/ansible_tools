#!/bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2022 Osiris Alejandro Gomez <osiris@gcoop.coop>
# Copyright (C) 2022 Osiris Alejandro Gomez <osiux@osiux.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# shellcheck disable=SC1090
# shellcheck disable=SC1091
# shellcheck source=/dev/null

[[ -n "$BASH_DEBUG" ]] && set -x

DIR_BIN="$(dirname "$0")" && source "$DIR_BIN/awx-common"

function usage()
{
cat << EOF
Usage:

\`\`\`bash

  $BIN awx v0.1.0 [DEPLOY_TYPE|update]

\`\`\`

Checkout and delete awx specific revision as tag, branch or commit.
Delete all resources (projects, job_templates, workflows) defined in file.

Example:

\`\`\`bash

  $BIN awx v0.1.0

\`\`\`

EOF
exit 0
}

[[ -e "$AWX_CFG" ]] || die "NOT FOUND .tower_cli.cfg TRY awx-config"

CURRENT_BRANCH="$(git branch --no-color | grep '^\* ' | cut -d ' ' -f2)"

[[ -n "$AWX_DIR"       ]] || AWX_DIR="$PWD"
[[ -z "$1"             ]] || AWX_DIR="$1"
[[ -n "$REVISION"      ]] || REVISION="$CURRENT_BRANCH"
[[ -z "$2"             ]] || REVISION="$2"
[[ -n "$DEPLOY_TYPE"   ]] || DEPLOY_TYPE='delete'
[[ -z "$AWX_DIR"       ]] && die "EMPTY AWX DIR"
[[ -z "$REVISION"      ]] && die "EMPTY REVISION"
[[ -z "$3"             ]] || DEPLOY_TYPE="$3"
[[ -d "$AWX_DIR"       ]] || die "NOT FOUND AWX DIR"
[[ -z "$DEPLOY_DIR"    ]] && DEPLOY_DIR='deploy'
DEPLOY_FILE="$DEPLOY_DIR/${DEPLOY_TYPE}.awx"
[[ -n "$DONT_FETCH"    ]] || DONT_FETCH=0
[[ -n "$DONT_PULL"     ]] || DONT_PULL=0 
[[ -n "$DONT_CHECKOUT" ]] || DONT_CHECKOUT=0

cd "$AWX_DIR"             || die "FAILED TO CHANGE TO AWX DIR"
[[ -d '.git'           ]] || die "NOT FOUND GIT REPOSITORY"

if [[ "$DONT_FETCH" -eq 0 ]]
then

git fetch                  || die "FAILED TO FECTH"

fi

if [[ "$CURRENT_BRANCH" != "$REVISION" ]]
then

  if [[ "$DONT_CHECKOUT" -eq 0 ]]
  then
    git checkout "$REVISION" || die "FAILED TO CHECKOUT $REVISION"
  fi

fi

REVISION_TYPE="$(git cat-file -t "$REVISION")"

if [[ "$REVISION_TYPE" != 'tag' ]]
then

  if [[ "$DONT_PULL" -eq 0 ]]
  then
    git pull               || die "FAILED TO PULL $REVISION"
  fi

fi

[[ -d "$DEPLOY_DIR"     ]] || die "NOT FOUND DIR $DEPLOY_DIR"
[[ -e "$DEPLOY_FILE"    ]] || die "NOT FOUND FILE $DEPLOY_FILE"

# EXIT IMMEDIATELY IF A COMMAND EXITS WITH A NON-ZERO STATUS
set -e

ASSETS="$(mktemp)"
awx-deploy-sort "$DEPLOY_FILE" | tac > "$ASSETS"
TOTAL="$(wc -l "$ASSETS")"
TOTAL="${TOTAL% *}"

stderror "WARNING $TOTAL ASSETS TO DELETE (PRESS CTRL-C TO CANCEL)"
for S in $(seq 5 -1 1)
do
  echo -n >&2 "$S ... "
  sleep 1
done

echo

while read -r TYPE JSON NAME
do

  ASSET_TYPE="${TYPE//_/-}"
  ASSET_CMD="awx-$ASSET_TYPE-delete"
  ASSET_NAME="$(basename "$JSON" .json)"

  if [[ "$ASSET_TYPE" = 'schedule' ]]
  then
    AWX_CMD="$ASSET_CMD $ASSET_NAME '$NAME'"
  else
    AWX_CMD="$ASSET_CMD $ASSET_NAME"
  fi

  stderror "DELETE $TYPE $JSON $NAME"
  if ! command -v "$ASSET_CMD" >/dev/null
  then
    die "NOT FOUND $ASSET_CMD"
  fi

  bash -c "$AWX_CMD"

done < "$ASSETS"

rm -f "$ASSETS"
