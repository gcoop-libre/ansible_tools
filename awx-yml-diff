#!/bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2021 Osiris Alejandro Gomez <osiris@gcoop.coop>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# shellcheck disable=SC1090
# shellcheck disable=SC1091
# shellcheck source=/dev/null

DIR_BIN=$(dirname "$0") && source "$DIR_BIN/awx-common"

function usage()
{
cat << EOF

Usage:

\`\`\`bash

  $BIN SRC_YML AWX_YML

\`\`\`

Compare and merge AWX group variables with local YAML group file.

Example:

\`\`\`bash

  $BIN group_vars/prn.yml group_vars/ftp.yml

  | \`key                      \` |   \`group_vars/prn.yml  \`   |   \` group_vars/ftp.yml  \`   |
  |-----------------------------|----------------------------|-----------------------------|
  | \`             ansible_host\` |   \`       {{ sprn_ip }}\`   | **\`        {{ sftp_ip }}\`** |
  | \`          apt_setup_proxy\` |   \`                true\`   |   \`                 true\`   |
  | \`       apt_setup_proxy_ip\` |   \`      {{ subnet }}.1\`   |   \`       {{ subnet }}.1\`   |
  | \`         apt_setup_source\` |   \`                true\`   |   \`                 true\`   |
  | \`       cups_lpadmin_users\` |   \`            ["root"]\`   | **\`                 null\`** |
  | \`   sftp_client_local_user\` |   \`                null\`   | **\`{{ sftp_local_user }}\`** |

\`\`\`

EOF
exit 0
}

[[ "$1" =~ ^[-]+(h|help) ]] && usage

function defaults()
{

KEYS="$(mktemp --suffix .tmp)"
FILES="$(mktemp --suffix .tmp)"

[[ -n "$WIDTH_VALUE" ]] || WIDTH_VALUE='30'
stderror "MAX VALUE WIDTH $WIDTH_VALUE"

[[ -n "$FONT_SIZE"   ]] || FONT_SIZE='9pt'
stderror "FONT SIZE $FONT_SIZE"

[[ -n "$AUTHOR" ]] || AUTHOR='CC-BY-SA Osiris Gomez osiris@gcoop.coop'
stderror "AUTHOR $AUTHOR"

[[ -n "$DATE" ]] || DATE="$(date +%F)"
stderror "DATE $DATE"

true > "$KEYS"

}

function validate()
{

# FIXME UNIQUE FILES
echo "$@" | tr ' ' '\n' | while read -r FILE
do

  if [[ -e "$FILE" ]]
  then
    echo "$FILE"
    yq -r 'keys | .[]' "$FILE" 2>/dev/null >> "$KEYS"
  else
    stderror "SKIPPING NOT FOUND FILE $FILE"
    continue
  fi

done > "$FILES"

[[ -s "$FILES" ]] || die "0 FILES FOUND"

sort -u "$KEYS" | sponge "$KEYS"

[[ -s "$KEYS" ]] || die "0 KEYS FOUND"

TOTAL_FILES="$(wc -l "$FILES" | cut -d ' ' -f1)"
stderror "FOUND $TOTAL_FILES FILES"

TOTAL_KEYS="$(wc -l "$KEYS" | cut -d ' ' -f1)"
stderror "FOUND $TOTAL_KEYS UNIQUE KEYS"

WIDTH_KEY="$(wc -L "$KEYS" | cut -d ' ' -f1)"
stderror >&2 "KEY WIDTH $WIDTH_KEY"

[[ -n "$MAX_KEY" ]] || MAX_KEY="$WIDTH_KEY"
stderror >&2 "MAX KEY WIDTH $MAX_KEY"

[[ -n "$TITLE" ]] || TITLE="Compare $(tr '\n' ' ' < "$FILES")"
stderror "TITLE $TITLE"

}

function header()
{

cat << EOF
---
title: $TITLE
date: $DATE
author: $AUTHOR
fontsize: $FONT_SIZE
classoption: landscape
---

EOF

}

function title()
{

printf "| \`%-*s\` |" "$MAX_KEY" 'key'
while read -r FILE
do

  printf "   \`%-*s\`   |" "$WIDTH_VALUE" "$FILE"

done < "$FILES"
printf "\n"

}

function div()
{

title | tr '[a-zA-Z0-9/_\.` ]+' '-'

}

function rows()
{

while read -r KEY
do

  LAST='START'
  KEY_NAME="$(echo "$KEY" | rev | cut -c -"$MAX_KEY" | rev)"
  printf "| \`%*s\` |" "$MAX_KEY" "$KEY_NAME"

  while read -r FILE
  do

    VALUE="$(yq -rc ".$KEY" "$FILE" 2>/dev/null)"
    [[ -z "$VALUE" ]] && VALUE='null'

    [[ "$VALUE" =~ "ansible_vault" ]] && VALUE="$(echo "$VALUE" | sed "s/\"__ansible_vault\"://g" | tr -d '"{' | sed 's/\\n//g' | tr -d ' ')"
    [[ "$VALUE" =~ "ANSIBLE_VAULT" ]] && VALUE="$(echo "$VALUE" | sed "s/\$ANSIBLE_VAULT;1.2;AES256;[a-z]\+//g" | head -2 | tail -1)"
    VALUE="$(echo "$VALUE" | cut -c -"$WIDTH_VALUE")"

    if [[ "$LAST" = 'START' ]]
    then
      printf "   \`%*s\`   |" "$WIDTH_VALUE" "$VALUE"
    else
      if [[ "$LAST" != "$VALUE" ]]
      then
        printf " **\`%*s\`** |" "$WIDTH_VALUE" "$VALUE"
      else
        printf "   \`%*s\`   |" "$WIDTH_VALUE" "$VALUE"
      fi
    fi

    LAST="$VALUE"

  done < "$FILES"

  printf "\n"

done < "$KEYS"

}

function clean()
{

rm -f "$KEYS"
rm -f "$FILES"

}

function main()
{

defaults
validate "$@"
header
title
div
rows
clean

}

main "$@"
