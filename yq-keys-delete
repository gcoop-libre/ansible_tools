#!/bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2022 Osiris Alejandro Gomez <osiris@gcoop.coop>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# shellcheck disable=SC1090
# shellcheck disable=SC1091
# shellcheck source=/dev/null

DIR_BIN=$(dirname "$0") && source "$DIR_BIN/awx-common"

function usage()
{
cat << EOF

Usage:

\`\`\`bash

  $BIN YAML_FILE [KEYS_FILE]

\`\`\`bash

Delete variables in top level of \`.yml\` based on keys.

\`\`\`

Example:

\`\`\`bash

  $BIN group_vars/apt.yml keys_to_delete

  cat keys_to_delete | $BIN group_vars/apt.yml

\`\`\`
EOF
exit 0
}

[[ "$1" =~ ^[-]+(h|help) ]] && usage

TMPI='NONE'

if [[ ! -t 0 ]]
then

  TMPI="$(mktemp)"

  true > "$TMPI"

  while IFS= read -r PIPED_INPUT
  do
    echo "$PIPED_INPUT" >> "$TMPI"
  done

fi

[[ -z "$1"         ]] && die "EMPTY YAML FILE"
[[ -e "$1"         ]] || die "NOT FOUND YAML FILE: $YAML_FILE"
YAML_FILE="$1"
[[ -z "$2"         ]] || KEYS_FILE="$2"
[[ -e "$TMPI"      ]] && KEYS_FILE="$TMPI"
[[ -e "$KEYS_FILE" ]] || die "NOT FOUND KEYS FILE: $KEYS_FILE"
[[ -n "$REGEX_KEY" ]] || REGEX_KEY='^[a-z0-9_]+'

YAML_KEYS="$(mktemp --suffix .yml)"

cp -f "$YAML_FILE" "$YAML_KEYS"
cp -f "$YAML_FILE" "$YAML_FILE.$(date +%s).bak"

while read -r KEY
do

  if [[ ! "$KEY" =~ $REGEX_KEY ]]
  then
    echo "INVALID KEY $KEY IN $KEYS_FILE"
    continue
  fi

  if ! grep -qE "^$KEY:" "$YAML_KEYS" 2>/dev/null
  then
    echo "NOT FOUND $KEY IN $YAML_FILE"
    continue
  fi

  YQ=". | del(.$KEY)"
  yq -y --sort-keys -r "$YQ" "$YAML_KEYS" | sponge "$YAML_KEYS"

done < "$KEYS_FILE" && mv -f "$YAML_KEYS" "$YAML_FILE"

rm -f "$TMPI"      2>/dev/null
rm -f "$YAML_KEYS" 2>/dev/null
