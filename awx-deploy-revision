#!/bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2022 Osiris Alejandro Gomez <osiris@gcoop.coop>
# Copyright (C) 2022 Osiris Alejandro Gomez <osiux@osiux.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# shellcheck disable=SC1090

DIR_BIN="$(dirname "$0")" && source "$DIR_BIN/awx-common"

function usage()
{
cat << EOF
Usage:

\`\`\`bash

  $BIN awx v0.1.0 [DEPLOY_TYPE|update]

\`\`\`

Checkout and deploy awx specific revision as tag, branch or commit.
Send all resources (projects, job_templates, workflows) defined in file.

Example:

\`\`\`bash

  $BIN awx v0.1.0 update

\`\`\`

EOF
exit 0
}

[[ -e "$AWX_CFG" ]] || die "NOT FOUND .tower_cli.cfg TRY awx-config"

AWX_DIR="$1"
REVISION="$2"
DEPLOY_TYPE='update'

[[ -z "$1"              ]] && die "EMPTY AWX DIR"
[[ -z "$2"              ]] && die "EMPTY REVISION"
[[ -z "$3"              ]] || DEPLOY_TYPE="$3"
[[ -d "$AWX_DIR"        ]] || die "NOT FOUND AWX DIR"
[[ -z "$DEPLOY_DIR"     ]] && DEPLOY_DIR='deploy'
DEPLOY_FILE="$DEPLOY_DIR/${DEPLOY_TYPE}.awx"

cd "$AWX_DIR"              || die "FAILED TO CHANGE TO AWX DIR"
[[ -d '.git'            ]] || die "NOT FOUND GIT REPOSITORY"
CURRENT_BRANCH="$(git branch --no-color | grep '^\* ' | cut -d ' ' -f2)"

git fetch                  || die "FAILED TO FECTH"

if [[ "$CURRENT_BRANCH" != "$REVISION" ]]
then
  git checkout "$REVISION" || die "FAILED TO CHECKOUT $REVISION"
fi

git pull                   || die "FAILED TO PULL $REVISION"

[[ -d "$DEPLOY_DIR"     ]] || die "NOT FOUND DIR $DEPLOY_DIR"
[[ -e "$DEPLOY_FILE"    ]] || die "NOT FOUND FILE $DEPLOY_FILE"

grep ^project "$DEPLOY_FILE" | sort | while read -r PROJECT
do

  [[ -e "$PROJECT" ]] || die "NOT FOUND FILE $PROJECT"
  PROJECT_NAME="$(basename "$PROJECT" .json)"

  echo "SEND PROJECT $PROJECT_NAME"
  echo "awx-cli send $PROJECT" | bash \
    || die "FAILED SEND PROJECT $PROJECT_NAME"

  echo "UPDATE PROJECT $PROJECT_NAME"
  echo "awx-cli project update -n $PROJECT_NAME" | bash \
    || die "FAILED UPDATE PROJECT $PROJECT_NAME"

done

grep ^inventory "$DEPLOY_FILE" | sort | while read -r INVENTORY
do

  [[ -e "$INVENTORY" ]] || die "NOT FOUND FILE $INVENTORY"

  JQ='.[].asset_relation.inventory_source[].source_project'
  INVENTORY_SOURCE="$(jq -r "$JQ" "$INVENTORY")"
  PROJECT_SOURCE="project/$INVENTORY_SOURCE.json"

  if [[ ! -e "$PROJECT_SOURCE" ]]
  then
    stderror "NOT FOUND FILE $PROJECT_SOURCE SKIP SEND $INVENTORY"
    continue
  fi

  echo "SEND PROJECT $INVENTORY_SOURCE"
  echo "awx-cli send $PROJECT_SOURCE" | bash \
    || die "FAILED SEND PROJECT $INVENTORY_SOURCE"

  echo "UPDATE PROJECT $INVENTORY_SOURCE"
  echo "awx-cli project update -n $INVENTORY_SOURCE" | bash \
    || die "FAILED UPDATE PROJECT $INVENTORY_SOURCE"

  echo "SEND INVENTORY $INVENTORY"
  echo "awx-cli send $INVENTORY" | bash \
    || die "FAILED SEND INVENTORY $INVENTORY"

  JQ='.[].asset_relation.inventory_source[].name'
  INVENTORY_SOURCE_NAME="$(jq -r "$JQ" "$INVENTORY")"
  echo "UPDATE INVENTORY SOURCE $INVENTORY_SOURCE_NAME"
  echo "awx-cli inventory_source update $INVENTORY_SOURCE_NAME" | bash \
    || die "FAILED UPDATE $INVENTORY_SOURCE_NAME"

done

grep ^job_template "$DEPLOY_FILE" | sort | while read -r JOB_TEMPLATE
do

  [[ -e "$JOB_TEMPLATE" ]] || die "NOT FOUND FILE $JOB_TEMPLATE"

  echo "SEND JOB_TEMPLATE $JOB_TEMPLATE"
  echo "awx-cli send $JOB_TEMPLATE" | bash \
    || die "FAILED SEND JOB_TEMPLATE $JOB_TEMPLATE"

done
